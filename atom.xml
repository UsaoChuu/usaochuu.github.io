<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://usaochuu.github.io</id>
    <title>UsaoChuu</title>
    <updated>2020-03-24T14:30:04.505Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://usaochuu.github.io"/>
    <link rel="self" href="https://usaochuu.github.io/atom.xml"/>
    <subtitle>?</subtitle>
    <logo>https://usaochuu.github.io/images/avatar.png</logo>
    <icon>https://usaochuu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, UsaoChuu</rights>
    <entry>
        <title type="html"><![CDATA[【笔记】HTML]]></title>
        <id>https://usaochuu.github.io/post/bi-ji-html/</id>
        <link href="https://usaochuu.github.io/post/bi-ji-html/">
        </link>
        <updated>2020-03-07T13:23:17.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>来自慕课网：<a href = "https://www.imooc.com/learn/9">HTML+CSS基础教程</a><br>
HTML参考手册(W3school) ：<a href = "https://www.w3school.com.cn/tags/index.asp">HTML 参考手册</a><br>
建议在学习HTML之前可以先学习一下Markdown，对学习HTML有挺大的帮助的（确实帮助我理解了一些概念，虽然比较简单）</p>
</blockquote>
<h4 id="html基本介绍">HTML基本介绍</h4>
<h5 id="web标准的构成">Web标准的构成</h5>
<p>结构（网页元素，HTML5）+表现（外观样式，CSS3）+行为（交互，JavaScript）</p>
<h5 id="html标签">HTML标签</h5>
<p><strong>标签关系</strong>：包含、并列关系</p>
<h6 id="基本结构标签"><strong>基本结构标签</strong></h6>
<p><code>&lt;html&gt;</code>：HTML标签（根标签），容纳所有网页元素的标签</p>
<p><code>&lt;head&gt;</code>：文档的头部（必须设置<code>&lt;title&gt;</code>），是所有头部元素的容器</p>
<p><code>&lt;title&gt;</code>：文档的标题</p>
<p><code>&lt;body&gt;</code>：文档的主体，页面内容基本都是包含在内的</p>
<pre><code class="language-html">&lt;!--My First Page --&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My First Page&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        GG4U
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h6 id="head"><code>&lt;head&gt;</code></h6>
<ul>
<li>文档的头部描述了文档的各种属性和信息，包括文档的标题等</li>
<li>绝大多数文档头部包含的数据都不会真正作为内容显示给读者</li>
<li>可用于head部分的标签</li>
</ul>
<pre><code class="language-html">&lt;head&gt;
    &lt;title&gt;这里显示的是网页的标题（导航栏上）&lt;/title&gt;
    &lt;meta&gt;
    &lt;link&gt;
    &lt;style&gt;...&lt;/style&gt;
    &lt;script&gt;...&lt;/script&gt;
&lt;/head&gt;
</code></pre>
<h4 id="认识标签">认识标签</h4>
<h5 id="语义化">语义化</h5>
<ul>
<li>明白每个标签的用途（在什么情况下使用此标签合理）</li>
<li>比如，网页上的文章的<strong>标题</strong>就可以用标题标签，网页上的各个栏目的<strong>栏目名称</strong>也可以使用标题标签</li>
<li>文章中内容的段落就得放在<strong>段落标签</strong>中，在文章中有想强调的文本，就可以使用 em 标签表示强调等等</li>
<li><strong>优点</strong>：容易被搜索引擎收录、更容易让屏幕阅读器读出网页内容</li>
</ul>
<h5 id="常用标签1">常用标签（1）</h5>
<ul>
<li>
<p><code>&lt;p&gt;</code>(paragraph - 段落标签)</p>
</li>
<li>
<p><code>&lt;hx&gt;</code>（标题标签）</p>
<ul>
<li><code>&lt;h1&gt;</code>标签因为比较重要，因此经常用于网页标题</li>
<li>其他各级的标签耶可以使用其他不同层级的标题标签</li>
</ul>
</li>
<li>
<p><code>&lt;strong&gt;</code> <code>&lt;em&gt;</code>：强调标签，加粗/斜体</p>
</li>
<li>
<p><code>&lt;span&gt;</code>：无语义，用于<strong>设置单独的样式</strong></p>
</li>
<li>
<p><code>&lt;q&gt;</code>：短文本引用（quotation）</p>
</li>
<li>
<p><code>&lt;blockquote&gt;</code>：长文本引用</p>
</li>
<li>
<p><code>&lt;br /&gt;</code>：空标签，换行，无结束标签</p>
</li>
<li>
<p><code>&amp;nbsp;</code>：空格</p>
</li>
<li>
<p><code>&lt;hr /&gt;</code>：添加水平横线用标签</p>
</li>
<li>
<p><code>&lt;address&gt;</code>：地址标签（电子邮件地址、签名或者文档的作者身份）</p>
</li>
<li>
<p><code>&lt;code&gt;</code>：加入一行代码</p>
</li>
<li>
<p><code>&lt;pre&gt;</code>：预格式化的文本，被包围在 pre 元素中的文本通常会保留空格和换行符，常用于加入多行代码</p>
</li>
</ul>
<h5 id="常用标签2">常用标签（2）</h5>
<ul>
<li><code>&lt;ul&gt;</code>，<code>&lt;li&gt;</code>：无序列表标签</li>
<li><code>&lt;ol&gt;</code>：有序标签</li>
<li><code>&lt;div&gt;</code>：划分板块
<ul>
<li>将页面上相互关联的元素（逻辑部分）分隔开</li>
<li><code>&lt;div id = &quot;Uoc&quot;&gt;</code>：给独立的板块进行命名</li>
</ul>
</li>
<li><code>&lt;table&gt;</code>：表格
<ul>
<li>创建表格的四个元素：<code>tbody</code>、<code>tr</code>、<code>th</code>、<code>td</code></li>
<li><code>&lt;tr&gt;</code>：表格的一行，有几对<code>&lt;tr&gt;</code>表格就有几行</li>
<li><code>&lt;td&gt;</code>：表格的一个单元格</li>
<li><code>&lt;th&gt;</code>：表头</li>
<li>未添加CSS样式之前，浏览器显示是没有表格线的</li>
<li><code>&lt;caption&gt;</code>：为表格添加标题</li>
<li><code>&lt;table summary = &quot;?&quot;&gt;</code>：为表格添加摘要</li>
</ul>
</li>
</ul>
<h5 id="常用标签3">常用标签（3）</h5>
<ul>
<li><code>&lt;a&gt;</code>：链接到另一个界面
<ul>
<li><code>&lt;a href = &quot;https://usaochuu.github.io&quot; target = &quot;_blank&quot;&gt;</code>：链接到<code>UsaoChuu的博客</code>(新建窗口打开)</li>
<li><code>&lt;a href = &quot;mailto: xxx@xxx.com ? cc = xx@xx.com &amp; bcc = xxx@xxx.cn &amp; subject = 主题 &amp; bdoy = 邮件内容&quot;&gt;</code>
<ul>
<li>发送邮件到<code>rbchuu@gmail.com</code></li>
<li><code>cc</code>指的是抄送的地址</li>
<li><code>bcc</code>指的是密件抄送的地址</li>
<li>多个收件人、抄送、密件抄送人用<code>;</code>隔开</li>
<li><code>subject</code>是邮件的主题</li>
<li><code>body</code>是邮件的内容</li>
</ul>
</li>
</ul>
</li>
<li><code>&lt;img&gt;</code>：图片
<ul>
<li><code>&lt;img src = “???.gif&quot;&gt;</code>：标识图像的位置(网络位置/磁盘)</li>
<li><code>alt = “???”</code>：指定图像的描述性文本</li>
<li><code>title = “???”</code>：在图像可见时，提供描述（鼠标滑过图片的时候显示的文字）</li>
</ul>
</li>
</ul>
<h4 id="表单标签">表单标签</h4>
<ul>
<li><code>&lt;form&gt;</code>
<ul>
<li><code>method</code>：数据传输的方式（<code>get</code>/<code>post</code>）</li>
<li><code>action</code>：浏览者输入的数据被传送到的地方，比如一个php界面（<code>save.php</code>）</li>
<li>所有表单控件应该放到<code>&lt;form&gt;</code>标签内</li>
</ul>
</li>
<li><code>&lt;input type = &quot;text/password/submit/reset&quot; name = &quot;?&quot; value = &quot;文本&quot; /&gt;</code>
<ul>
<li><code>type</code>：文本/密码输入框/提交数据/重置</li>
<li><code>name</code>：为文本框命名</li>
<li><code>value</code>：为文本输入框设置默认值（一般起到提示作用）</li>
</ul>
</li>
<li><code>&lt;textarea&gt;</code>：标签是成对出现的
<ul>
<li><code>cols</code>：多行输入域的列数</li>
<li><code>rows</code>：多行输入域的行数</li>
<li><code>&lt;textarea&gt;</code>之间可以输入默认值</li>
</ul>
</li>
</ul>
<pre><code class="language-html">&lt;form  method=&quot;post&quot; action=&quot;save.php&quot;&gt;
        &lt;label&gt;!&lt;/label&gt;
        &lt;textarea cols=&quot;50&quot; rows=&quot;10&quot; &gt;...&lt;/textarea&gt;
&lt;/form&gt;
</code></pre>
<ul>
<li>
<p><code>&lt;input type = &quot;radio/checkbox&quot; value = &quot;?&quot; name = &quot;名称&quot; checked = &quot;checked&quot;&gt;</code>：单选/复选框</p>
<ul>
<li><code>type</code>：<code>radio</code>是单选框，<code>checkbox</code>是复选框</li>
<li><code>value</code>：提交到服务器的值</li>
<li><code>name</code>：为控件命名，有利于后台程序使用</li>
<li><code>checked</code>：值为<code>checked</code>的时候被选中</li>
<li>同一组的单选按钮，<code>name</code>的取值一定要一致</li>
</ul>
</li>
<li>
<p><code>&lt;select&gt;</code>：下拉列表框</p>
<ul>
<li><code>&lt;option value = &quot;?&quot;&gt;</code>：<code>?</code>是向服务器提交的值</li>
<li><code>selected = “selected”</code>：表示被默认选中</li>
<li><code>&lt;option&gt; ??? &lt;/option&gt;</code>：<code>???</code>是显示的值</li>
<li><code>multiple = “multiple”</code>：使用下拉列表框进行多选</li>
</ul>
</li>
</ul>
<pre><code class="language-html">&lt;label&gt;爱好:&lt;/label&gt;
    &lt;select multiple = &quot;multiple&quot;&gt;
      &lt;option value=&quot;看书&quot;&gt;看书&lt;/option&gt;
      &lt;option value=&quot;旅游&quot;&gt;旅游&lt;/option&gt;
      &lt;option value=&quot;运动&quot;&gt;运动&lt;/option&gt;
      &lt;option value=&quot;购物&quot;&gt;购物&lt;/option&gt;
&lt;/select&gt;
</code></pre>
<ul>
<li><code>&lt;label for = &quot;控件id名称&quot;&gt;</code>
<ul>
<li>为鼠标用户改进可用性</li>
<li><code>for</code>属性中的值一定要与相关控件的<code>id</code>属性值一致</li>
</ul>
</li>
</ul>
<pre><code class="language-html">&lt;form&gt;
  &lt;label for=&quot;male&quot;&gt;男&lt;/label&gt;
  &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;male&quot; /&gt;
  &lt;br /&gt;
  &lt;label for=&quot;female&quot;&gt;女&lt;/label&gt;
  &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;female&quot; /&gt;
  &lt;label for=&quot;email&quot;&gt;输入你的邮箱地址&lt;/label&gt;
  &lt;input type=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;Enter email&quot;&gt;
&lt;/form&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【杂记】听歌]]></title>
        <id>https://usaochuu.github.io/post/za-ji-ting-ge/</id>
        <link href="https://usaochuu.github.io/post/za-ji-ting-ge/">
        </link>
        <updated>2020-03-06T07:21:37.000Z</updated>
        <content type="html"><![CDATA[<p>试一试wyy的iframe能不能搞进来</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=1&id=35498229&auto=1&height=430"></iframe>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【笔记】Java程序设计]]></title>
        <id>https://usaochuu.github.io/post/note/</id>
        <link href="https://usaochuu.github.io/post/note/">
        </link>
        <updated>2020-03-05T06:02:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="java程序设计中国大学mooc">Java程序设计(中国大学MOOC)</h1>
<blockquote>
<p>来自中国大学mooc：<a href = "https://www.icourse163.org/course/PKU-1001941004"> Java程序设计</a></p>
</blockquote>
<h3 id="java语言与面向对象设计">Java语言与面向对象设计</h3>
<ul>
<li><strong>特点</strong>：平台无关、安全稳定、支持多线程</li>
<li><strong>丰富的类库</strong>：package、程序包、I/O包、GUI</li>
<li><strong>C++--</strong>： 自动内存管理、数组类型长度固定、无需头文件、不用多重继承、纯面向对象……</li>
<li><strong>Java虚拟机</strong>（Java Virtual Machine）
<ul>
<li>在计算机上由软件或硬件模拟的计算机，读取并处理经过编译的字节码class文件</li>
<li>Java虚拟机规范定义了指令集、寄存器集、类文件结构、堆栈、内存区域、垃圾收集堆……</li>
<li>JRE = JVM + API（The Java Runtime Environment）
<ul>
<li>保证Java的安全性和跨平台</li>
<li><strong>加载代码</strong>：由class loader完成</li>
<li><strong>校验代码</strong>：由bytecode verifier完成</li>
<li><strong>执行代码</strong>：由runtime interpreter完成</li>
</ul>
</li>
</ul>
</li>
<li><strong>Java自动垃圾回收技术（Garbage Collection）</strong>
<ul>
<li>系统级线程跟踪存储空间的分配情况</li>
<li>在JVM空闲的时候，检查并且释放可被释放的存储器空间</li>
<li>程序员无需也无法精确控制和干预该回收过程</li>
</ul>
</li>
<li>JDK = JRE + Tools</li>
<li><strong>对象</strong>：可标识的存储区域</li>
<li><strong>类</strong>：具有共同属性和行为的对象集合
<ul>
<li><strong>属性</strong>：变量（字段 field）</li>
<li><strong>行为</strong>：函数（方法 method）</li>
<li>类是对象的抽象（<strong>模板</strong>），对象是类的<strong>实例</strong></li>
</ul>
</li>
<li>面向对象的三大<strong>特征</strong>
<ul>
<li><strong>封装性</strong>
<ul>
<li>模块化：将属性和行为封装在类中，程序定义很多类</li>
<li>信息隐蔽：将类的细节部分隐藏起来，用户只通过受保护的接口访问某个类</li>
</ul>
</li>
<li><strong>继承性</strong>
<ul>
<li>父类和子类共享数据和方法</li>
<li><strong>优点</strong>：更好地进行<strong>抽象与分类</strong>、增加代码<strong>复用率</strong>、提高可维护性</li>
</ul>
</li>
<li><strong>多态性</strong>
<ul>
<li>不同的对象受到同一个消息（调用方法）可以产生完全不同的结果</li>
<li>实现的细节由接受的对象自己决定</li>
</ul>
</li>
</ul>
</li>
<li>面向对象设计思想的要点
<ul>
<li>认为客观世界都由各种对象组成</li>
<li>程序的分析和设计
<ul>
<li>有哪些对象、类</li>
<li>每个类之间有哪些属性、方法</li>
<li>类之间的关系（继承、关联等）</li>
<li>对象之间发送消息（调用方法）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="简单的java程序">简单的Java程序</h3>
<ul>
<li>Application，Applet程序的区别
<ul>
<li>结构和运行环境不同</li>
<li>前者是独立的程序，需要执行器（调用虚拟机）来实行</li>
<li>后者是嵌在专门的HTML网页中的非独立程序
<ul>
<li>由专门的appletViewer来运行</li>
<li>或者由Web浏览器（调用Java虚拟机）来运行</li>
</ul>
</li>
</ul>
</li>
<li>Application程序</li>
</ul>
<pre><code class="language-java">//	helloworld.java
//	class是主体 public的类名与文件同名 main的写法是固定的
public class HelloWorldApp{
	public static void main(String args[]){
		System.out.println(&quot;Hello World!&quot;);
        //	System.out.print/println/printf
	}
}
</code></pre>
<ul>
<li>Applet程序</li>
</ul>
<pre><code class="language-java">//	helloworldapplet.java
import java.awt.*;	// 导入已经定义好的类
import java.applet.*;
import javax.swing.*；
//	extends JApplet表示继承
public class HelloWorldApplet extends Japplet{
	public void paint(Graphics g){
		g.drawString (&quot;Hello world!&quot;,20,20）;
	}
}
</code></pre>
<pre><code class="language-html">&lt;!-	helloworld.html &gt;
&lt;!- .class文件是java编译生成的class文件&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt; An Applet&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;applet code = &quot;HelloWorldApplet.class&quot;
                width = 200 height = 40 background = white&gt;
        &lt;/applet&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ul>
<li>Java程序的基本构成</li>
</ul>
<pre><code class="language-java">//	HelloDate.java
package usaochuu.usao.niubi;
//	package表明了这个包在什么路径下面,可以有0-1句
import java.util.*;
//	导入其他类的类库
public class HelloDate {
/*	一个文件只能有一个public类
	类 = 类头 + 类体
    类成员 = 字段 + 方法
    方法 = 方法头 + 方法体
*/  
}
</code></pre>
<ul>
<li>程序的编辑、编译和运行
<ul>
<li>程序的编辑：文件名要与public class的类名一致</li>
<li>程序编译：转换为字节码（*.class）
<ul>
<li>*.class文件中包含java虚拟机的指令</li>
<li>编译可以使用JDK工具javac.exe</li>
</ul>
</li>
<li>程序的运行：执行*.class文件中指令的过程</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
</feed>